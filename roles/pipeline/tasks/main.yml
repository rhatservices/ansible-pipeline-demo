---
- name: Read the developer token from the corresponding K8s secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: gitea-developer-token
    namespace: "{{ gitea_namespace }}"
  register: pipeline_gitea_developer_token_secret

- name: Register fact integration_gitea_developer_token
  ansible.builtin.set_fact:
    pipeline_gitea_developer_token: "{{ pipeline_gitea_developer_token_secret.resources[0].data.token | b64decode }}"

- name: Install the OpenShift Pipelines operator
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: openshift-pipelines-operator-rh
        namespace: openshift-operators
      spec:
        channel: pipelines-1.9
        installPlanApproval: Automatic
        name: openshift-pipelines-operator-rh
        source: redhat-operators
        sourceNamespace: openshift-marketplace

- name: Check status of pipelines deployment
  kubernetes.core.k8s_info:
    kind: Deployment
    label_selectors: app.kubernetes.io/component=webhook
    namespace: openshift-pipelines
  register: pipelines_status
  until: pipelines_status.resources | json_query('[*].status.readyReplicas') | select ('match','1') | list | length == 2
  retries: 30
  delay: 3

- name: Print number of deployments ready
  ansible.builtin.debug:
    msg: "Pipelines deployments ready: {{ pipelines_status.resources | json_query('[*].status.readyReplicas') | select('match', '1') | list | length }}"
    verbosity: 2

# # checking for running pods has a race condition. if in the moment of the check
# # all pods are running we continue, even if pods are currently being scheduled
# - name: Pause for 2 minutes to give the pipeline time to finish startup
#   ansible.builtin.pause:
#     minutes: 2

- name: Create a namespace for the ansible-pipeline
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: ansible-pipeline

- name: Create secret for pushing to the examples collection
  kubernetes.core.k8s:
    state: present
    namespace: ansible-pipeline
    definition: "{{ lookup('template', 'ansible-staging-git-basicauth-secret.yml.j2') | from_yaml }}"

- name: Find all pipelines files
  ansible.builtin.find:
    paths: "{{ playbook_dir }}/roles/pipeline/files/pipeline"
    file_type: file
    recurse: false
  register: pipeline_files

- name: Create pipeline objects
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
    namespace: ansible-pipeline
  loop: "{{ pipeline_files.files | map(attribute='path') | list }}"
    # - ansible-staging-pull-request.yml
    # - ansible-staging-pipeline.yml
    # - ansible-staging-controller-job-task.yml
    # - ansible-staging-triggertemplate.yml
    # - ansible-staging-lint-task.yml
    # - ansible-staging-molecule-task.yml
    # - ansible-staging-triggerbinding.yml
    # - ansible-staging-eventlistener.yml
    # - ansible-feature-pipeline.yml
    # - ansible-feature-triggerbinding.yml
    # - ansible-feature-request-task.yml
    # - ansible-feature-triggertemplate.yml
    # - ansible-feature-eventlistener.yml
